## ðŸ‘‡ &thinsp; Examples

<label for="fav-languages">Favorite programming languages? <span>multi select</span></label>

```svelte example collapsible repl="https://svelte.dev/repl/e3b88f59f62b498d943ecf7756ab75d7" stackblitz="src/site/Examples.svx"
<script lang="ts">
  import MultiSelect from '$lib'
  import { languages } from '../options'
  import LanguageSlot from './LanguageSlot.svelte'

  let selected: string[]
</script>

<pre>selected = {JSON.stringify(selected)}</pre>

<MultiSelect
  id="fav-languages"
  options={languages}
  placeholder="Take your pick..."
  bind:selected
>
  <LanguageSlot let:option {option} slot="selected" />
  <LanguageSlot let:option {option} slot="option" />
</MultiSelect>
```

<label for="fav-ml-tool">Favorite machine learning tool? <span>single select with loading indicator on text input</span></label>

```svelte example collapsible repl="https://svelte.dev/repl/79e22e1905c94456aa21564b4d5f8759" stackblitz="src/site/Examples.svx"
<script lang="ts">
  import MultiSelect from '$lib'
  import { ml_libs } from '../options'

  let value: { label: string, disabled: boolean, preselected: boolean }
  let searchText = ''
  let loading = false
</script>

<pre>value = {JSON.stringify(value)}</pre>

<MultiSelect
  id="fav-ml-tool"
  maxSelect={1}
  maxSelectMsg={(current, max) => `${current} of ${max} selected`}
  options={ml_libs}
  bind:value
  bind:searchText
  placeholder="Favorite machine learning tool?"
  {loading}
/>
```

<label for="confetti-select">Chance of Confetti <span>max select with custom filter function and callback on item selection</span></label>

```svelte example collapsible repl="https://svelte.dev/repl/516279bd62ec424986115263c2cdc169" stackblitz="src/site/Examples.svx"
<script lang="ts">
  import MultiSelect from '$lib'
  import { frontend_libs } from '../options'
  import RepoSlot from './RepoSlot.svelte'
  import Confetti from './Confetti.svelte'
  import type { ObjectOption } from '$lib'

  const frontend_libs_filter_func = (op: ObjectOption, searchText: string) => {
    if (!searchText) return true
    const [label, lang, searchStr] = [op.label, op.lang, searchText].map((s) =>
      s.toLowerCase()
    )
    return label.includes(searchStr) || lang.includes(searchStr)
  }

  let show_confetti = false
</script>

<MultiSelect
  id="confetti-select"
  options={frontend_libs}
  maxSelect={4}
  placeholder="Favorite web framework?"
  filterFunc={frontend_libs_filter_func}
  on:add={(e) => {
    if (e.detail.option.label === `Svelte`) {
      show_confetti = true
      setTimeout(() => (show_confetti = false), 3000)
    }
  }}
>
  <RepoSlot let:idx {idx} let:option {option} slot="option" />
</MultiSelect>
{#if show_confetti}
  <Confetti />
{/if}
```

<label for="color-select">Color select <span>with form submission</span></label>

```svelte example collapsible repl="https://svelte.dev/repl/3a217c39932047a09f61d6425b04a7c3" stackblitz="src/site/Examples.svx"
<script lang="ts">
  import MultiSelect from '$lib'
  import { colors } from '../options'
  import ColorSlot from './ColorSlot.svelte'

  let selected: string[]
</script>

<form
  on:submit|preventDefault={() => {
    alert(`You selected '${selected.join(`, `)}'`)
  }}
>
  <MultiSelect
    id="color-select"
    options={colors}
    bind:selected
    placeholder="Pick some colors..."
    allowUserOptions="append"
    required
  >
    <ColorSlot let:idx {idx} let:option {option} slot="selected" />
    <ColorSlot let:idx {idx} let:option {option} slot="option" />
  </MultiSelect>
  <button>submit</button>
  (due to passing <code>required={true}</code> here, form submission will abort if
  Multiselect is empty)
  <p>
    Also sets
    <code>allowUserOptions="append"</code> to allow adding custom colors.
  </p>
</form>
```

<label for="countries">What country are you from? <span><code>minSelect=1</code> means no <code>x</code> button to remove the selected option</span></label>

```svelte example collapsible repl="https://svelte.dev/repl/4ff40862436e4bfbb2bd55d234352bb1" stackblitz="src/site/Examples.svx"
<script lang="ts">
  import MultiSelect from '$lib'
  import { countries } from '../options'

  let selected: string[]
  // required={1} means form validation will prevent submission if no option selected
</script>

<MultiSelect
  id="countries"
  options={countries}
  required={1}
  minSelect={1}
  maxSelect={1}
  selected={[`Canada`]}
/>
```

<style>
  label:not(:first-of-type) {
    margin-top: 3em;
    display: block;
  }
  label span {
    font-weight: 100;
    margin-left: 1em;
  }
</style>
